// Generated by CoffeeScript 2.5.1
(function() {
  // (($) ->

  // ) jQuery
  var Bid, Game, Main, Player, ScoreSheet, Tricks, f_dur;

  Player = class Player {
    constructor(name) {
      this.name = name;
      this.scores = [];
      this.bids = [];
      this.tricks = [];
    }

    set_tricks(hand, new_tricks) {
      if (this.tricks.length === hand - 1) {
        // haven't recorded these tricks yet, add it to the end
        return this.tricks.push(new_tricks);
      } else if (this.bids.length >= hand) {
        // tricks already recorded, edit it
        return this.tricks[hand - 1] = new_tricks;
      }
    }

    get_tricks(hand) {
      if (this.tricks.length === 0) {
        return 0;
      } else {
        return this.tricks[hand - 1];
      }
    }

    remove_tricks(hand) {
      var destroyed;
      if (this.tricks.length >= hand) {
        // throw out that one element
        return destroyed = this.tricks.splice(hand - 1, 1);
      }
    }

    set_bid(hand, new_bid) {
      if (this.bids.length === hand - 1) {
        // haven't placed a bid yet, add it to the end
        return this.bids.push(new_bid);
      } else if (this.bids.length === hand) {
        // bid has already been placed; edit it
        return this.bids[hand - 1] = new_bid;
      }
    }

    get_bid(hand) {
      if (this.bids.length < hand) {
        return 0;
      } else {
        return this.bids[hand - 1];
      }
    }

    remove_bid(hand) {
      if (this.bids.length >= hand) {
        // throw out that one element
        return this.bids.splice(hand - 1, 1);
      }
    }

    get_score(hand) {
      if (this.scores.length < hand) {
        return 0;
      } else {
        return this.scores[hand - 1];
      }
    }

    remove_score(hand) {
      if (this.scores.length >= hand) {
        // throw out that one element
        return this.scores.splice(hand - 1, 1);
      }
    }

    update_score(hand) {
      var bid, score, to_add, tricks;
      bid = this.get_bid(hand);
      tricks = this.get_tricks(hand);
      score = 0;
      to_add = 0;
      if (hand > 1) {
        score = this.get_score(hand - 1);
      }
      if (bid === tricks) {
        if (bid === 0) {
          to_add = 5;
        } else {
          to_add = 10 + bid;
        }
      }
      if (this.scores.length === 0) {
        // there are no scores, so just tack on this hand's score
        return this.scores.push(to_add);
      } else if (this.scores.length === hand - 1) {
        // We only have last hand's score, so we need to add a new score to the 
        // array
        return this.scores.push(this.get_score(hand - 1) + to_add);
      } else if (this.scores.length === hand) {
        // updating most recent score
        return this.scores[hand - 1] = this.get_score(hand - 1) + to_add;
      } else {
        alert('Error updating score. Your game is probably borked. Sorry.');
        console.log("Error updating scores. Info:");
        console.log(`  player: ${this.name}`);
        console.log(`  scores length: ${this.scores.length}`);
        console.log(`  bids length: ${this.bids.length}`);
        console.log(`  tricks length: ${this.tricks.length}`);
        console.log(`  last bid: ${this.bids[this.tricks.length - 1]}`);
        console.log(`  last tricks: ${this.tricks[this.tricks.length - 1]}`);
        return console.log(`  last score: ${this.scores[this.scores - 1]}`);
      }
    }

  };

  Game = class Game {
    constructor(players1, half_game, max_cards) {
      this.players = players1;
      this.half_game = half_game;
      this.max_cards = max_cards;
      this.num_players = this.players.length;
      this.phase = 0;
    }

    zero_hand() {
      return Math.floor(this.phase / 2);
    }

    hand() {
      return Math.floor(this.phase / 2) + 1;
    }

    dealer() {
      return this.players[this.zero_hand() % this.num_players];
    }

    num_hands() {
      if (this.half_game) {
        return this.max_cards;
      } else {
        return 2 * this.max_cards;
      }
    }

    hand_size() {
      if (this.half_game) {
        return this.hand();
      } else {
        return Math.min(this.hand(), this.num_hands() - this.hand() + 1);
      }
    }

    trump() {
      if (this.hand() === this.max_cards + 1) {
        return false;
      } else {
        return true;
      }
    }

    over() {
      return this.hand() > this.num_hands();
    }

    winners() {
      var high_score, l, len, player, ref, winners;
      high_score = -1;
      winners = [];
      ref = this.players;
      for (l = 0, len = ref.length; l < len; l++) {
        player = ref[l];
        (function(player) {
          var score;
          score = player.scores[player.scores.length - 1];
          if (score > high_score) {
            winners = [player];
            return high_score = score;
          } else if (score === high_score) {
            return winners.push(player);
          }
        })(player);
      }
      return winners;
    }

  };

  f_dur = 400;

  Main = {
    max_players: 26,
    max_cards: 7,
    num_hands: 14,
    half_game: false,
    setup_valid: false,
    setup: function() {
      var i, l, ref, ref1;
      $('#setup').fadeIn(f_dur);
      Main.num_players = parseInt($('#num_players').val(), 10);
      for (i = l = ref = Main.num_players + 1, ref1 = Main.max_players; (ref <= ref1 ? l <= ref1 : l >= ref1); i = ref <= ref1 ? ++l : --l) {
        $(`div\#player-${i}`).hide();
      }
      $('#num_players').off('change');
      $('#num_players').change(function() {
        Main.num_players = parseInt($('#num_players').val(), 10);
        return Main.update_players();
      });
      $('input.player-name').off('focusout');
      $('input.player-name').focusout(function() {
        if ($(this).val().length > 0) {
          return $(this).removeClass('is-invalid');
        } else {
          return $(this).addClass('is-invalid');
        }
      });
      $('input.player-name').off('keyup');
      $('input.player-name').keyup(Main.check_setup);
      $('#max_cards_slider').off('change');
      $('#max_cards_slider').change(function() {
        Main.max_cards = parseInt($('#max_cards_slider').val(), 10);
        $('h1#max_cards').text(Main.max_cards);
        $('.summary-max-cards').text(Main.max_cards);
        if (Main.half_game) {
          return Main.num_hands = Main.max_cards;
        } else {
          return Main.num_hands = 2 * Main.max_cards;
        }
      });
      $('#half_game').off('change');
      $('#half_game').change(function() {
        Main.half_game = $('#half_game').is(':checked');
        if (Main.half_game) {
          Main.num_hands = Main.max_cards;
          return $('#summary-full-game').fadeOut(f_dur / 2);
        } else {
          Main.num_hands = 2 * Main.max_cards;
          return $('#summary-full-game').fadeIn(f_dur / 2);
        }
      });
      Main.update_players;
      Main.update_max_cards;
      // clicking the "get going" button, but destroy any existing ones
      $('button#setup-submit').off('click');
      return $('button#setup-submit').click(function() {
        Main.check_setup();
        if (Main.setup_valid) {
          // everything looks good. Set up game with data from form and start
          // first bidding hand
          return $('div#setup').fadeOut(f_dur / 2, function() {
            var m, players, ref2;
            players = [];
            for (i = m = 1, ref2 = Main.num_players; (1 <= ref2 ? m <= ref2 : m >= ref2); i = 1 <= ref2 ? ++m : --m) {
              players.push(new Player($(`\#player-${i}-name`).val()));
            }
            Main.game = new Game(players, Main.half_game, Main.max_cards);
            ScoreSheet.setup();
            return Bid.setup();
          });
        } else {
          Main.mark_invalid();
          return $('div#setup-error').modal();
        }
      });
    },
    update_players: function() {
      var i, l, m, num, ref, ref1, ref2;
      num = Main.num_players;
      for (i = l = ref = num + 1, ref1 = Main.max_players; (ref <= ref1 ? l <= ref1 : l >= ref1); i = ref <= ref1 ? ++l : --l) {
        $(`div\#player-${i}`).slideUp(f_dur / 2);
      }
      for (i = m = 2, ref2 = num; (2 <= ref2 ? m <= ref2 : m >= ref2); i = 2 <= ref2 ? ++m : --m) {
        $(`div\#player-${i}`).slideDown(f_dur / 2);
      }
      $('#summary-players').text(num);
      Main.update_max_cards();
      return Main.check_setup();
    },
    update_max_cards: function() {
      var max_num, min_num;
      max_num = Math.floor(51 / Main.num_players);
      min_num = 2;
      $('#max_cards_slider').attr('min', min_num);
      $('#max_cards_slider').attr('max', max_num);
      if (Main.max_cards > max_num) {
        Main.max_cards = max_num;
        $('h1#max_cards').text(Main.max_cards);
        return $('.summary-max-cards').text(Main.max_cards);
      }
    },
    check_setup: function() {
      var i, l, ref, res;
      res = true;
      i = 1;
      for (i = l = 1, ref = Main.num_players; (1 <= ref ? l <= ref : l >= ref); i = 1 <= ref ? ++l : --l) {
        (function(i) {
          return res = res && ($(`\#player-${i}-name`).val().length > 0);
        })(i);
      }
      res = res && Main.max_cards <= Math.floor(51 / Main.num_players);
      Main.setup_valid = res;
      if (Main.setup_valid) {
        return $('#setup-submit').removeClass('disabled');
      } else {
        return $('#setup-submit').addClass('disabled');
      }
    },
    mark_invalid: function() {
      var i, l, ref, results;
      results = [];
      for (i = l = 1, ref = Main.num_players; (1 <= ref ? l <= ref : l >= ref); i = 1 <= ref ? ++l : --l) {
        results.push((function(i) {
          if ($(`\#player-${i}-name`).val().length === 0) {
            return $(`\#player-${i}-name`).addClass('is-invalid');
          } else {
            return $(`\#player-${i}-name`).removeClass('is-invalid');
          }
        })(i));
      }
      return results;
    }
  };

  Bid = {
    bid_sum: 0,
    non_dealer_bid_sum: 0,
    bids_valid: false,
    setup: function() {
      var hand, hand_size, i, l, ref, ref1;
      // set up basic info
      hand = Main.game.hand();
      Bid.bids_valid = false;
      Bid.bid_sum = 0;
      Bid.non_dealer_bid_sum = 0;
      // ensure confirm button appears disabled
      $('button#bids-submit').addClass('disabled');
      // update dealer name
      $('b#dealer').text(Main.game.dealer().name);
      hand_size = Main.game.hand_size();
      // update number of cards
      if (Main.game.hand_size() === 1) {
        $('span#num-cards').text(`${hand_size} card`);
      } else {
        $('span#num-cards').text(`${hand_size} cards`);
      }
      // possibly hide text about revealing trump card
      if (Main.game.trump()) {
        $('span#reveal-trump').show();
        $('span#no-trump').hide();
      } else {
        $('span#reveal-trump').hide();
        $('span#no-trump').show();
      }
      // nuke bid buttons from previous bidding round
      $('#bid-players').html('');
// create buttons for each players bids
// start with player just after dealer, which is coincidentally found at
// index hand % number_of_players
      for (i = l = ref = hand, ref1 = hand + Main.game.num_players - 1; (ref <= ref1 ? l <= ref1 : l >= ref1); i = ref <= ref1 ? ++l : --l) {
        (function(i) {
          var j, k, m, player, ref2, to_insert;
          j = i % Main.game.num_players;
          player = Main.game.players[j];
          to_insert = `<h4>${player.name}'s bid</h4>`;
          to_insert = to_insert + `<div class='btn-group mb-2' role='group' aria-label='${player.name} bid'>`;
          for (k = m = 0, ref2 = hand_size; (0 <= ref2 ? m <= ref2 : m >= ref2); k = 0 <= ref2 ? ++m : --m) {
            (function(k) {
              return to_insert = to_insert + `<button type=button data-player-i=${j} data-bid=${k} class='btn btn-outline-primary bid-button'>${k}</button>`;
            })(k);
          }
          to_insert = to_insert + "</div>";
          // add the button group and label to the DOM
          return $(to_insert).appendTo('#bid-players');
        })(i);
      }
      // set up listener to make sure bids are recorded, but destroy any
      // previous ones
      $('button.bid-button').off('click');
      $('button.bid-button').click(function() {
        var bid, len, len1, m, n, perfect_bid, player, ref2, ref3, self, valid;
        self = this;
        i = parseInt($(this).data('player-i'));
        player = Main.game.players[i];
        hand = Main.game.hand();
        // hand_size = Main.game.hand_size()
        perfect_bid = hand_size - Bid.non_dealer_bid_sum;
        bid = parseInt($(this).data('bid'));
        // screw the dealer. They can't make a bid that causes the total bid to
        // be equal to the total number of cards
        if ((player === Main.game.dealer()) && (bid === perfect_bid)) {
          $('#screw-the-dealer').modal();
          return;
        }
        // mark button as active and actually set bid in player object
        $(`[data-player-i=${i}]`).removeClass('active');
        $(self).addClass('active');
        player.set_bid(hand, bid);
        // update sum of the current bids, and disable the "perfect fit" button
        // for dealer, if necessary
        Bid.bid_sum = 0;
        Bid.non_dealer_bid_sum = 0;
        ref2 = Main.game.players;
        for (m = 0, len = ref2.length; m < len; m++) {
          player = ref2[m];
          (function(player) {
            Bid.bid_sum += player.get_bid(hand);
            if (player !== Main.game.dealer()) {
              return Bid.non_dealer_bid_sum += player.get_bid(hand);
            }
          })(player);
        }
        perfect_bid = hand_size - Bid.non_dealer_bid_sum;
        Bid.update_dealer_buttons(perfect_bid);
        // Check to see if bids are good to go
        valid = true;
        ref3 = Main.game.players;
        // has each player made a bid?
        for (n = 0, len1 = ref3.length; n < len1; n++) {
          player = ref3[n];
          (function(player) {
            valid = valid && player.bids.length === hand;
            valid = valid && player.get_bid(hand) >= 0;
            return valid = valid && player.get_bid(hand) <= hand_size;
          })(player);
        }
        valid = valid && Bid.bid_sum !== hand_size;
        Bid.bids_valid = valid;
        if (valid) {
          return $('button#bids-submit').removeClass('disabled');
        } else {
          return $('button#bids-submit').addClass('disabled');
        }
      });
      // set up listener for back button, but destroy any existing handlers
      $('button#bids-back').off('click');
      $('button#bids-back').click(function() {
        return Bid.go_back(Main.game.hand());
      });
      // set up listener for submit button, but destroy any existing handlers
      $('button#bids-submit').off('click');
      $('button#bids-submit').click(function(evt) {
        evt.stopPropagation();
        evt.preventDefault();
        if (Bid.bids_valid) {
          // stop showing bids; makes score sheet too long
          // ScoreSheet.add_bids(hand)
          Main.game.phase += 1;
          return $('div#bid').fadeOut(f_dur / 2, Tricks.setup);
        } else {
          $('span#hand-size').text(hand_size);
          return $('div#bid-error').modal();
        }
      });
      $('div#play-area').fadeIn();
      return $('div#bid').fadeIn();
    },
    update_dealer_buttons: function(perfect_bid) {
      var dealer_i;
      dealer_i = Main.game.players.indexOf(Main.game.dealer());
      // make all buttons have normal primary color outlines
      $(`button[data-player-i=${dealer_i}]`).addClass('btn-outline-primary');
      $(`button[data-player-i=${dealer_i}]`).removeClass('btn-outline-danger');
      $(`button[data-player-i=${dealer_i}]`).removeClass('disabled');
      // make the perfect bid button, if it exists, be inactive and red
      $(`button[data-player-i=${dealer_i}][data-bid=${perfect_bid}]`).removeClass('btn-outline-primary');
      $(`button[data-player-i=${dealer_i}][data-bid=${perfect_bid}]`).removeClass('active');
      $(`button[data-player-i=${dealer_i}][data-bid=${perfect_bid}]`).addClass('btn-outline-danger');
      return $(`button[data-player-i=${dealer_i}][data-bid=${perfect_bid}]`).addClass('disabled');
    },
    go_back: function(hand) {
      var l, len, player, ref;
      if (hand === 1) {
        return $('div#play-area').fadeOut(f_dur / 2, function() {
          return Main.setup();
        });
      } else {
        ref = Main.game.players;
        // remove most recent bids, if they exist (as well as tricks and scores)
        for (l = 0, len = ref.length; l < len; l++) {
          player = ref[l];
          (function(player) {
            player.remove_bid(hand);
            player.remove_tricks(hand - 1);
            return player.remove_score(hand - 1);
          })(player);
        }
        ScoreSheet.remove_scores(hand - 1);
        Main.game.phase -= 1;
        return $('div#bid').fadeOut(f_dur / 2, Tricks.setup);
      }
    }
  };

  Tricks = {
    setup: function() {
      var dealer_i, first_bid_i, hand, i, l, leader, leader_i, m, max_bid, ref, ref1, ref2, ref3;
      dealer_i = Main.game.players.indexOf(Main.game.dealer());
      first_bid_i = (dealer_i + 1) % Main.game.num_players;
      // deactivate submission button explicitly
      Tricks.tricks_valid = false;
      $('button#tricks-submit').addClass('disabled');
      // determine the first player, which is the player who had the highest bid
      // first. Thus, the person who has the highest bid, but made that bid first
      leader_i = null;
      max_bid = -1;
      hand = Main.game.hand();
      for (i = l = ref = first_bid_i, ref1 = first_bid_i + Main.game.num_players - 1; (ref <= ref1 ? l <= ref1 : l >= ref1); i = ref <= ref1 ? ++l : --l) {
        (function(i) {
          var j, player;
          j = i % Main.game.num_players;
          player = Main.game.players[j];
          if (player.get_bid(hand) > max_bid) {
            max_bid = player.get_bid(hand);
            return leader_i = j;
          }
        })(i);
      }
      leader = Main.game.players[leader_i];
      // update text for leader's name
      $('b#leader').text(leader.name);
      // nuke tricks buttons before rebuilding them
      $('#tricks-players').html('');

      // start with player just after dealer, which is coincidentally found at
// index hand % number_of_players
      for (i = m = ref2 = hand, ref3 = hand + Main.game.num_players - 1; (ref2 <= ref3 ? m <= ref3 : m >= ref3); i = ref2 <= ref3 ? ++m : --m) {
        (function(i) {
          var j, player, to_insert;
          j = i % Main.game.num_players;
          player = Main.game.players[j];
          to_insert = "<div class='row'>";
          to_insert += "<div class='col-4 col-md-5 vcenter'>";
          to_insert += `<h4>${player.name}'s bid: ${player.get_bid(hand)}</h4>`;
          to_insert += "</div><div class='col vcenter'>";
          to_insert += `<div class='btn-group mb-2' role='group' aria-label='${player.name} bid'>`;
          to_insert += `<button type=button data-player-i=${j} data-success=1 class='btn btn-outline-success tricks-button'>Made It</button>`;
          to_insert += `<button type=button data-player-i=${j} data-success=0 class='btn btn-outline-danger tricks-button'>FAILED</button>`;
          to_insert += "</div></div></div>";
          // add the button group and label to the DOM
          return $(to_insert).appendTo('#tricks-players');
        })(i);
      }
      // set up handlers for the tricks reporting buttons, but destroy any
      // existing handlers
      $('button.tricks-button').off('click');
      $('button.tricks-button').click(function() {
        var len, n, player, ref4, self, success, valid;
        self = this;
        i = parseInt($(self).data('player-i'));
        player = Main.game.players[i];
        success = parseInt($(self).data('success'), 10);
        // mark button as active and actually set tricks in player object
        $(`[data-player-i=${i}]`).removeClass('active');
        $(self).addClass('active');
        // design flaw: player was designed record actual amount of tricks, but
        // that is not needed. Rather than refactoring, report correct number
        // of tricks if bid was made, or else -1 (0 doesn't work since 0 is a
        // a valid bid)
        player.remove_tricks(hand);
        player.remove_score(hand);
        if (success === 1) {
          player.set_tricks(hand, player.get_bid(hand));
        } else {
          player.set_tricks(hand, -1);
        }
        player.update_score(hand);
        // Check to see if tricks are good to go
        valid = true;
        ref4 = Main.game.players;
        // has each player made a bid?
        for (n = 0, len = ref4.length; n < len; n++) {
          player = ref4[n];
          (function(player) {
            return valid = valid && player.tricks.length === hand;
          })(player);
        }
        Tricks.tricks_valid = valid;
        if (valid) {
          return $('button#tricks-submit').removeClass('disabled');
        } else {
          return $('button#tricks-submit').addClass('disabled');
        }
      });
      // set up listener for back button, but destroy any existing ones
      $('button#tricks-back').off('click');
      $('button#tricks-back').click(function() {
        return Tricks.go_back(Main.game.hand());
      });
      // set up handler for confirmation button, but destroy any existing ones
      $('button#tricks-submit').off('click');
      $('button#tricks-submit').click(function(evt) {
        var n, ref4, res, winners;
        evt.stopPropagation();
        evt.preventDefault();
        if (Tricks.tricks_valid) {
          ScoreSheet.add_scores(hand, Main.game.hand_size());
          Main.game.phase += 1;
          // account for if we just played the last hand (game over)
          if (Main.game.over()) {
            // determine the winner or winners and display correct text on
            // endscreen
            winners = Main.game.winners();
            if (winners.length === 1) {
              $('span#winner').text(winners[0].name);
            } else if (winners.length === 2) {
              $('span#winner').text(`${winners[0].name} and ${winners[1].name}`);
            } else {
              res = "";
              for (i = n = 0, ref4 = winners.length - 2; (0 <= ref4 ? n <= ref4 : n >= ref4); i = 0 <= ref4 ? ++n : --n) {
                (function(i) {
                  return res += `${winners[i].name}, `;
                })(i);
              }
              res += `and ${winners[winners.length - 1].name}`;
              $('span#winner').text(res);
            }
            // button to set up a new game
            $('button#again').off('click');
            $('button#again').click(function() {
              $('div#endscreen').fadeOut(f_dur / 2);
              return $('div#play-area').fadeOut(f_dur / 2, Main.setup);
            });
            // show the donate button one in four times
            if (Math.random() > 0.75) {
              $('div#donate').show();
            } else {
              $('div#donate').hide();
            }
            // actually show victory screen
            return $('div#tricks').fadeOut(f_dur / 2, function() {
              return $('div#endscreen').fadeIn(f_dur / 2);
            });
          } else {
            // normal situation, just go back to bids for the next hand
            return $('div#tricks').fadeOut(f_dur / 2, Bid.setup);
          }
        } else {
          return $('div#tricks-error').modal();
        }
      });
      return $('#tricks').fadeIn(f_dur / 2);
    },
    go_back: function(hand) {
      var l, len, player, ref;
      ref = Main.game.players;
      // remove most recent tricks and scores, if they exist. Definitely remove
      // previous bids to force setting them in bid view
      for (l = 0, len = ref.length; l < len; l++) {
        player = ref[l];
        (function(player) {
          player.remove_tricks(hand);
          player.remove_score(hand);
          return player.remove_bid(hand);
        })(player);
      }
      // we don't show bids any more
      // ScoreSheet.remove_bids(hand)
      Main.game.phase -= 1;
      return $('div#tricks').fadeOut(f_dur / 2, Bid.setup);
    }
  };

  ScoreSheet = {
    setup: function() {
      var html, l, len, player, ref;
      html = '<table class="table table-sm table-striped">';
      html += '<thead><tr>';
      html += '<th scope="col" class="text-center">#</th>';
      ref = Main.game.players;
      for (l = 0, len = ref.length; l < len; l++) {
        player = ref[l];
        (function(player) {
          return html += `<th scope='col' class='text-center'>${player.name}</th>`;
        })(player);
      }
      html += '</tr></thead>';
      html += '<tbody id="scores">';
      html += '</tbody>';
      return $('div#scoreboard').html(html);
    },
    add_bids: function(hand) {
      var i, l, len, player, ref, row;
      row = `<tr data-hand=${hand} class='bid-row'></tr>`;
      $(row).hide().appendTo('tbody#scores');
      $(`<th scope='row' class='text-center'>${hand}</th>`).appendTo(`tr.bid-row[data-hand=${hand}]`);
      ref = Main.game.players;
      for (i = l = 0, len = ref.length; l < len; i = ++l) {
        player = ref[i];
        (function(player, i) {
          return $(`<td class='text-center' data-hand=${hand} data-player-i=${i}>${player.get_bid(hand)}</td>`).appendTo(`tr.bid-row[data-hand=${hand}]`);
        })(player, i);
      }
      return $(`tr.bid-row[data-hand=${hand}]`).fadeIn(f_dur / 2);
    },
    add_scores: function(hand, hand_size) {
      var i, l, len, player, ref, row;
      row = `<tr data-hand=${hand} class='score-row'></tr>`;
      $(row).hide().appendTo('tbody#scores');
      $(`<th scope='row' class='text-center'>${hand_size}</td>`).appendTo(`tr.score-row[data-hand=${hand}]`);
      ref = Main.game.players;
      for (i = l = 0, len = ref.length; l < len; i = ++l) {
        player = ref[i];
        (function(player, i) {
          var extra_class, score;
          score = player.get_score(hand);
          extra_class = 'text-success';
          if (score === 0 || (hand > 1 && score === player.get_score(hand - 1))) {
            extra_class = 'text-danger';
          }
          return $(`<td class='text-center ${extra_class}' data-hand=${hand} data-player-i=${i}>${score}</td>`).appendTo(`tr.score-row[data-hand=${hand}]`);
        })(player, i);
      }
      return $(`tr.score-row[data-hand=${hand}]`).fadeIn(f_dur / 2);
    },
    remove_bids: function(hand) {
      return $(`tr.bid-row[data-hand=${hand}]`).fadeOut(f_dur / 2, function() {
        return $(`tr.bid-row[data-hand=${hand}]`).remove();
      });
    },
    remove_scores: function(hand) {
      return $(`tr.score-row[data-hand=${hand}]`).fadeOut(f_dur / 2, function() {
        return $(`tr.score-row[data-hand=${hand}]`).remove();
      });
    }
  };

  $(document).ready(function() {
    return Main.setup();
  });

}).call(this);
